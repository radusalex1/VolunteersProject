<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VolunteersProject</name>
    </assembly>
    <members>
        <member name="F:VolunteersProject.Common.VolunteerEnrollmentStatusEnum.Pending">
            <summary>
            Mail in pending
            </summary>
        </member>
        <member name="F:VolunteersProject.Common.VolunteerEnrollmentStatusEnum.Accepted">
            <summary>
            Event Accepted
            </summary>
        </member>
        <member name="F:VolunteersProject.Common.VolunteerEnrollmentStatusEnum.Declined">
            <summary>
            Event Declined
            </summary>
        </member>
        <member name="M:VolunteersProject.Controllers.AccountController.#ctor(VolunteersProject.Repository.IVolunteerRepository,Microsoft.Extensions.Configuration.IConfiguration,VolunteersProject.Services.ITokenService,VolunteersProject.Repository.IUserRepository,Microsoft.Extensions.Logging.ILogger{VolunteersProject.Controllers.AccountController},MailServices.IEmailService)">
            <summary>
            Contructor
            </summary>
            <param name="volunteerRepository"></param>
            <param name="config">Inject config service.</param>
            <param name="tokenService">Inject jwt token service.</param>
            <param name="userRepository">Inject user repository service.</param>
            <param name="logger"></param>
            <param name="emailService"></param>
        </member>
        <member name="M:VolunteersProject.Controllers.AccountController.Login">
            <summary>
            Login
            </summary>
            <returns>Load Login view.</returns>
        </member>
        <member name="M:VolunteersProject.Controllers.AccountController.ReloadLogin">
            <summary>
            Reload login.
            </summary>
            <returns>Load Login view.</returns>
        </member>
        <member name="M:VolunteersProject.Controllers.AccountController.Logout">
            <summary>
            Logout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.AccountController.Error(System.String)">
            <summary>
            Display the error view
            </summary>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.AccountController.InputEmailResetPassword">
            <summary>
            Get method for input email for reset password;
            </summary>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.AccountController.InputEmailResetPassword(VolunteersProject.DTO.EnterEmailForPasswordRecoveryDTO)">
            <summary>
            Post method for input email for reset password
            </summary>
            <param name="enterEmailForPasswordRecoveryDTO"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.ContributionsController.SendEmail(System.Int32,System.Collections.Generic.List{VolunteersProject.DTO.VolunteerDTO})">
            <summary>
            Send email to selected volunteers
            </summary>
            <param name="sendInvitationEmailList">Selected volunteer list.</param>
        </member>
        <member name="M:VolunteersProject.Controllers.ContributionsController.SaveDirectAssignedVoluteersToContribution(System.Int32,System.Collections.Generic.List{VolunteersProject.DTO.VolunteerDTO})">
            <summary>
            Save assignment of volunteers to a specific contribution.
            </summary>
            <param name="contributionId">Contribution id.</param>
            <param name="directAssignmentVolunteerList">Selected volunteer list.</param>
        </member>
        <member name="M:VolunteersProject.Controllers.EnrollmentsController.#ctor(VolunteersProject.Repository.IEnrollmentRepository,VolunteersProject.Repository.IVolunteerRepository,VolunteersProject.Repository.IContributionRepository,Microsoft.Extensions.Logging.ILogger{VolunteersProject.Controllers.VolunteersController},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            constructor
            </summary>
            <param name="enrollmentRepository"></param>
            <param name="volunteerRepository"></param>
            <param name="contributionRepository"></param>
            <param name="logger"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:VolunteersProject.Controllers.EnrollmentsController.Details(System.Int32)">
            <summary>
            get sorted elements;
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:VolunteersProject.Controllers.GeneralController">
            <summary>
            General Controller
            </summary>
        </member>
        <member name="M:VolunteersProject.Controllers.GeneralController.#ctor(Microsoft.Extensions.Logging.ILogger{VolunteersProject.Controllers.GeneralController},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:VolunteersProject.Controllers.GeneralController.ValidateCity(System.String)">
            <summary>
            Validates city(to capitals)
            </summary>
            <param name="city"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.GeneralController.ValidateName(System.String)">
            <summary>
            Validates Name(all capitals)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.GeneralController.PhoneNumberIsValid(System.String)">
            <summary>
            Validates Phone number
            </summary>
            <param name="phoneNumber"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.GeneralController.InstagramIsValid(System.String)">
            <summary>
            Validates Instagram
            </summary>
            <param name="instagramProfile"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.GeneralController.EmailIsValid(System.String)">
            <summary>
            Returns true is email is valid, false otherwise
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.GeneralController.ValidateImageProfile(VolunteersProject.Models.Volunteer,System.Int32,System.Int32)">
            <summary>
            Validates Image profile
            </summary>
            <param name="volunteer"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.GeneralController.SortContributions(System.String,System.Collections.Generic.List{VolunteersProject.Models.Contribution})">
            <summary>
            Method to sort events by criterias.
            </summary>
            <param name="sortOrder"></param>
            <param name="contributions"></param>
            <returns></returns>
        </member>
        <member name="T:VolunteersProject.Controllers.HomeController">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="T:VolunteersProject.Controllers.VolunteersController">
            <summary>
            Volunteer controller.
            </summary>
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.#ctor(Microsoft.Extensions.Logging.ILogger{VolunteersProject.Controllers.VolunteersController},Microsoft.Extensions.Configuration.IConfiguration,VolunteersProject.Repository.IVolunteerRepository,VolunteersProject.Repository.IUserRepository)">
            <summary>
            Contructor
            </summary>
            <param name="logger">Logger.</param>
            <param name="volunteerRepository">Volunteer repository.</param>
            <param name="userRepository"></param>
            <param name="configuration">Application configuration.</param>
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.Index(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Display a list of volunteers.
            </summary>
            <param name="sortOrder">Sort order.</param>
            <param name="SearchString">Search string.</param>
            <param name="currentFilter">Current filter.</param>
            <param name="pageNumber">Page number.</param>
            <returns></returns>
            GET: Volunteers
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.GetSortedVolunteers(System.String,System.Linq.IQueryable{VolunteersProject.Models.Volunteer})">
            <summary>
            Here sort volunteers
            </summary>
            <param name="sortOrder"></param>
            <param name="volunteers"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.Details(System.Int32)">
            <summary>
            Details of volunteer
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.Delete(System.Nullable{System.Int32})">
            <summary>
            Get volunteer by id.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns>Volunteer.</returns>
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.SetVolunteerImageProfile(System.Int32)">
            <summary>
            Set the volunteer image profile.
            </summary>
            <param name="volunteerId">Volunteer id.</param>
            <returns>Volunteer image profile as a file.</returns>
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.PersonalInfoEdit(System.Int32)">
            <summary>
            Edit personal info page
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.PersonalInfoEdit(System.Int32,VolunteersProject.Models.CurrentUser)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="currentUser"></param>
            <returns></returns>
        </member>
        <member name="P:VolunteersProject.DTO.EnterEmailForPasswordRecoveryDTO.Email">
            <summary>
            Email for 
            </summary>
        </member>
        <member name="T:VolunteersProject.DTO.LoginModel">
            <summary>
            login model
            </summary>
        </member>
        <member name="T:VolunteersProject.DTO.AvailableVolunters">
            <summary>
            DTO that contains available volunteers for a contribution id.
            </summary>
        </member>
        <member name="P:VolunteersProject.DTO.AvailableVolunters.ContributionId">
            <summary>
            Gets or sets the contribution id.
            </summary>
        </member>
        <member name="P:VolunteersProject.DTO.AvailableVolunters.VolunteersDTO">
            <summary>
            Gets or sets the volunteersDTO list.
            </summary>
        </member>
        <member name="T:VolunteersProject.DTO.VolunteerDTO">
            <summary>
            DTO for volunteer.
            </summary>
        </member>
        <member name="P:VolunteersProject.DTO.VolunteerDTO.Id">
            <summary>
            Gets or sets the volunteer id.
            </summary>
        </member>
        <member name="T:VolunteersProject.Models.AuthenticateRequest">
            <summary>
            Authentication model.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.AuthenticateRequest.Username">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.AuthenticateRequest.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="T:VolunteersProject.Models.Contribution">
            <summary>
            Contribution model.
            </summary>
        </member>
        <member name="T:VolunteersProject.Models.CurrentUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.Surname">
            <summary>
            Gets or sets the first/sur name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.City">
            <summary>
            
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.Email">
            <summary>
            
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.Phone">
            <summary>
            Get or sets the phone.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.BirthDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.JoinHubDate">
            <summary>
            Get or sets the join date to the hub.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.InstagramProfile">
            <summary>
            Gets or sets the instagram profile.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.FaceBookProfile">
            <summary>
            Gets or sets the Facebook profile.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.ImageProfile">
            <summary>
            Gets or sets the image profile.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.CurrentUser.DescriptionContributionToHub">
            <summary>
            Gets or set the description contribution to hub.
            </summary>
        </member>
        <member name="T:VolunteersProject.Models.ErrorViewModel">
            <summary>
            Error model.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.RegisterFormModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.RegisterFormModel.Surname">
            <summary>
            Gets or sets the first/sur name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.RegisterFormModel.JoinHubDate">
            <summary>
            Get or sets the join date to the hub.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.RegisterFormModel.InstagramProfile">
            <summary>
            Gets or sets the instagram profile.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.RegisterFormModel.FaceBookProfile">
            <summary>
            Gets or sets the Facebook profile.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Role.Name">
            <summary>
            administrator,simple user etc;
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Role.Power">
            <summary>
            the more power the more rights the user has
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Role.Description">
            <summary>
            administrator,simple user etc;
            </summary>
        </member>
        <member name="T:VolunteersProject.Models.User">
            <summary>
            used to get logged user from dbo.
            </summary>
        </member>
        <member name="T:VolunteersProject.Models.Volunteer">
            <summary>
            Volunteer model.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.Id">
            <summary>
            Gets or sets the volunteer id.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.Surname">
            <summary>
            Gets or sets the first/sur name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.City">
            <summary>
            
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.Phone">
            <summary>
            Get or sets the phone.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.Age">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.Enrollments">
            <summary>
            
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.FullName">
            <summary>
            Gets or sets the full name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.JoinHubDate">
            <summary>
            Get or sets the join date to the hub.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.InstagramProfile">
            <summary>
            Gets or sets the instagram profile.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.FaceBookProfile">
            <summary>
            Gets or sets the Facebook profile.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.DescriptionContributionToHub">
            <summary>
            Gets or set the description contribution to hub.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.ImageProfile">
            <summary>
            Gets or sets the image profile.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.ImageProfileByteArray">
            <summary>
            Gets or sets the image profile byte array.
            </summary>
        </member>
        <member name="T:VolunteersProject.Repository.ContributionRepository">
            <summary>
            Contribution repository.
            </summary>
        </member>
        <member name="M:VolunteersProject.Repository.ContributionRepository.#ctor(Microsoft.Extensions.Logging.ILogger{VolunteersProject.Repository.ContributionRepository},VolunteersProject.Data.VolunteersContext)">
            <summary>
            Contructor
            </summary>
            <param name="logger">Logger.</param>
            <param name="context">context.</param>
        </member>
        <member name="M:VolunteersProject.Repository.ContributionRepository.GetContributionById(System.Int32)">
            <summary>
            Get volunteer by id.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.ContributionRepository.GetContributions">
            <summary>
            Get all volunteers.
            </summary>
            <returns>List of all volunteers.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.EnrollmentRepository.#ctor(VolunteersProject.Data.VolunteersContext)">
            <summary>
            Contructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:VolunteersProject.Repository.EnrollmentRepository.GetEnrollmentById(System.Int32)">
            <summary>
            Get volunteer by id.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.EnrollmentRepository.GetEnrollments">
            <summary>
            Get all volunteers.
            </summary>
            <returns>List of all volunteers.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.EnrollmentRepository.GetEnrollments_With_Data">
            <summary>
            Gets all enrollments
            </summary>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.EnrollmentRepository.Save(VolunteersProject.Models.Enrollment)">
            <summary>
            Save enrollment
            </summary>
            <param name="enrollment"></param>
        </member>
        <member name="M:VolunteersProject.Repository.EnrollmentRepository.UpdateEnrollment(VolunteersProject.Models.Enrollment)">
            <summary>
            Update to new Enrollment
            </summary>
            <param name="enrollment"></param>
        </member>
        <member name="M:VolunteersProject.Repository.EnrollmentRepository.EnrollmentExists(VolunteersProject.Models.Enrollment)">
            <summary>
            true is enrollment exists, otherwise false
            </summary>
            <param name="enrollment"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.EnrollmentRepository.DeleteEnrollment(VolunteersProject.Models.Enrollment)">
            <summary>
            Delete enrollment
            </summary>
            <param name="enrollment"></param>
        </member>
        <member name="M:VolunteersProject.Repository.IUserRepository.GetUser(VolunteersProject.DTO.LoginModel)">
            <summary>
            Get User based on login credentials
            </summary>
            <param name="userMode"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.IUserRepository.AddUser(VolunteersProject.Models.User)">
            <summary>
            Add User
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.IUserRepository.AlreadyUseUsername(System.String)">
            <summary>
            Check if user exists
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.IUserRepository.AlreadyUserUsername_OnEditPersonalInfo(VolunteersProject.Models.CurrentUser)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.IUserRepository.ChangePasswordBasedOnUserId(System.Int32,System.String)">
            <summary>
            Change password based on user id
            </summary>
            <param name="NewPassword"></param>
        </member>
        <member name="M:VolunteersProject.Repository.IUserRepository.GetUserById(System.Int32)">
            <summary>
            Get user by id;
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.IUserRepository.DeteleUser(VolunteersProject.Models.User)">
            <summary>
            Deletes a user
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:VolunteersProject.Repository.IUserRepository.UpdateUser(VolunteersProject.Models.User)">
            <summary>
            Update a User
            </summary>
            <param name="user"></param>
        </member>
        <member name="T:VolunteersProject.Repository.IVolunteerRepository">
            <summary>
            Interface for volunteers repository.
            </summary>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.ReturnUserIdBasedOnEmail(System.String)">
            <summary>
            Return the user id of volunteer based on email
            </summary>
            <param name="Email"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.GetContributionsByVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Gets the contributions where the volunteer given as parameter participated at.
            </summary>
            <param name="volunteer"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.GetVolunteers">
            <summary>
            Get all volunteers.
            </summary>
            <returns>List of all volunteers.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.GetVolunteerById(System.Nullable{System.Int32})">
            <summary>
            Get volunteer by id.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns>Volunteer.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.GetVolunteerWithEnrollmentsById(System.Nullable{System.Int32})">
            <summary>
            Get volunteer with related enrollments.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns>Return colunteer with related enrollments.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.GetAvailableVolunteers(System.Int32)">
            <summary>
            Get all not assigned volunteers to the current contribution id.
            </summary>
            <param name="contributionId">Contribution id.</param>
            <returns>List of not assigned volunteers.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.AddVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Add volunteer.
            </summary>
            <param name="volunteer"></param>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.UpdateVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Update volunteer.
            </summary>
            <param name="volunteer">Volunteer.</param>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.VolunteerExists(System.Int32)">
            <summary>
            Check by id if volunteer exist.
            </summary>
            <param name="id"></param>
            <returns>True if exist, otherwise false.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.CheckVolunteerExistByPhoneOrEmail(VolunteersProject.Models.Volunteer)">
            <summary>
            Search by phone, email if volunteer exist.
            </summary>
            <param name="volunteer"></param>
            <returns>True if exist, otherwise false.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.DeleteVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Delete volunteer.
            </summary>
            <param name="volunteer">Volunteer.</param>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.GetVolunteerTotalPoints(VolunteersProject.Models.Volunteer)">
            <summary>
            Returns volunteers total points based on events.
            </summary>
            <param name="volunteer"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.GetVolunteerByUserId(System.Int32)">
            <summary>
            Return the volunteer based on its userId
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.EmailExists(System.String)">
            <summary>
            Return true is email Exists, false otherwise
            </summary>
            <param name="Email"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.RolesRepository.#ctor(VolunteersProject.Data.VolunteersContext)">
            <summary>
            constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:VolunteersProject.Repository.RolesRepository.GetAdminRight">
            <summary>
            get admin right
            </summary>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.RolesRepository.GetUserRight">
            <summary>
            get user right
            </summary>
            <returns></returns>
        </member>
        <member name="T:VolunteersProject.Repository.UserRepository">
            <summary>
            Repository for Users
            </summary>
        </member>
        <member name="M:VolunteersProject.Repository.UserRepository.#ctor(VolunteersProject.Data.VolunteersContext,VolunteersProject.Repository.IVolunteerRepository)">
            <summary>
            constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:VolunteersProject.Repository.UserRepository.GetUser(VolunteersProject.DTO.LoginModel)">
            <summary>
            get user
            </summary>
            <param name="userModel"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.UserRepository.AddUser(VolunteersProject.Models.User)">
            <summary>
            insert a user
            </summary>
            <param name="user"></param>
            <returns> true if succeded, false otherwise</returns>
        </member>
        <member name="M:VolunteersProject.Repository.UserRepository.AlreadyUseUsername(System.String)">
            <summary>
            method to check username unique
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.UserRepository.AlreadyUserUsername_OnEditPersonalInfo(VolunteersProject.Models.CurrentUser)">
            <summary>
            
            </summary>
            <param name="currentUser"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.UserRepository.ChangePasswordBasedOnUserId(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="NewPassword"></param>
        </member>
        <member name="M:VolunteersProject.Repository.UserRepository.GetUserById(System.Int32)">
            <summary>
            Returns user by its id;
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.UserRepository.DeteleUser(VolunteersProject.Models.User)">
            <summary>
            Deletes this user;
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:VolunteersProject.Repository.UserRepository.UpdateUser(VolunteersProject.Models.User)">
            <summary>
            Update a user
            </summary>
            <param name="user"></param>
        </member>
        <member name="T:VolunteersProject.Repository.VolunteerRepository">
            <summary>
            Repository for volunteers.
            </summary>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.#ctor(VolunteersProject.Data.VolunteersContext)">
            <summary>
            Contructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.GetAvailableVolunteers(System.Int32)">
            <summary>
            Get all not assigned volunteers to the current contribution id.
            </summary>
            <param name="contributionId">Contribution id.</param>
            <returns>List of not assigned volunteers.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.GetVolunteerById(System.Nullable{System.Int32})">
            <summary>
            Get volunteer by id.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns>Return volunteer.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.GetVolunteerWithEnrollmentsById(System.Nullable{System.Int32})">
            <summary>
            Get volunteer with related enrollments.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns>Return colunteer with related enrollments.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.GetVolunteers">
            <summary>
            Get all volunteers.
            </summary>
            <returns>List of all volunteers.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.AddVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Add volunteer.
            </summary>
            <param name="volunteer"></param>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.UpdateVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Update volunteer.
            </summary>
            <param name="volunteer">Volunteer.</param>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.VolunteerExists(System.Int32)">
            <summary>
            Check by id if volunteer exist.
            </summary>
            <param name="id"></param>
            <returns>True if exist, otherwise false.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.DeleteVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Delete volunteer.
            </summary>
            <param name="volunteer">Volunteer.</param>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.CheckVolunteerExistByPhoneOrEmail(VolunteersProject.Models.Volunteer)">
            <summary>
            Search by phone, email if volunteer exist.
            </summary>
            <param name="volunteer"></param>
            <returns>True if exist, otherwise false.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.GetVolunteerTotalPoints(VolunteersProject.Models.Volunteer)">
            <summary>
            Return points of volunteer
            </summary>
            <param name="volunteer"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.GetVolunteerByUserId(System.Int32)">
            <summary>
            Return the volunteer with the useriD given as parameter
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.GetContributionsByVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            return list of contributions of volunteer given as parameter to be displayed on HomePage;
            </summary>
            <param name="volunteer"></param>
            <returns></returns>
        </member>
        <member name="T:VolunteersProject.Util.Helper">
            <summary>
            Helper class for extension methods.
            </summary>
        </member>
        <member name="M:VolunteersProject.Util.Helper.FirstUpperNextLower(System.String)">
            <summary>
            Make upper the first character, make lower the rest.
            </summary>
            <param name="value">String to change.</param>
            <returns>Return a modified string.</returns>
        </member>
    </members>
</doc>
