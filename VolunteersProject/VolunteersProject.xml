<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VolunteersProject</name>
    </assembly>
    <members>
        <member name="M:VolunteersProject.Controllers.AccountController.#ctor(Microsoft.Extensions.Configuration.IConfiguration,VolunteersProject.Services.ITokenService,VolunteersProject.Repository.IUserRepository,Microsoft.Extensions.Logging.ILogger{VolunteersProject.Controllers.AccountController})">
            <summary>
            Contructor
            </summary>
            <param name="config">Inject config service.</param>
            <param name="tokenService">Inject jwt token service.</param>
            <param name="userRepository">Inject user repository service.</param>
        </member>
        <member name="M:VolunteersProject.Controllers.AccountController.Login">
            <summary>
            Login
            </summary>
            <returns>Load Login view.</returns>
        </member>
        <member name="M:VolunteersProject.Controllers.AccountController.ReloadLogin">
            <summary>
            Reload login.
            </summary>
            <returns>Load Login view.</returns>
        </member>
        <member name="M:VolunteersProject.Controllers.AccountController.Logout">
            <summary>
            Logout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.AccountController.Error(System.String)">
            <summary>
            Display the error view
            </summary>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.ContributionsController.SendEmail(System.Int32,System.Collections.Generic.List{VolunteersProject.DTO.VolunteerDTO})">
            <summary>
            Send email to selected volunteers
            </summary>
            <param name="sendInvitationEmailList">Selected volunteer list.</param>
        </member>
        <member name="M:VolunteersProject.Controllers.ContributionsController.SaveDirectAssignedVoluteersToContribution(System.Int32,System.Collections.Generic.List{VolunteersProject.DTO.VolunteerDTO})">
            <summary>
            Save assignment of volunteers to a specific contribution.
            </summary>
            <param name="contributionId">Contribution id.</param>
            <param name="directAssignmentVolunteerList">Selected volunteer list.</param>
        </member>
        <member name="M:VolunteersProject.Controllers.EnrollmentsController.Details(System.Nullable{System.Int32})">
            <summary>
            get sorted elements;
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:VolunteersProject.Controllers.HomeController">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="T:VolunteersProject.Controllers.VolunteersController">
            <summary>
            Volunteer controller.
            </summary>
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.#ctor(Microsoft.Extensions.Logging.ILogger{VolunteersProject.Controllers.VolunteersController},VolunteersProject.Repository.IVolunteerRepository,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Contructor
            </summary>
            <param name="logger">Logger.</param>
            <param name="volunteerRepository">Volunteer repository.</param>
            <param name="configuration">Application configuration.</param>
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.Details(System.Nullable{System.Int32})">
            <summary>
            Here sort Students
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.Delete(System.Nullable{System.Int32})">
            <summary>
            Get volunteer by id.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns>Volunteer.</returns>
        </member>
        <member name="M:VolunteersProject.Controllers.VolunteersController.SetVolunteerImageProfile(System.Int32)">
            <summary>
            Set the volunteer image profile.
            </summary>
            <param name="volunteerId">Volunteer id.</param>
            <returns>Volunteer image profile as a file.</returns>
        </member>
        <member name="T:VolunteersProject.DTO.AvailableVolunters">
            <summary>
            DTO that contains available volunteers for a contribution id.
            </summary>
        </member>
        <member name="P:VolunteersProject.DTO.AvailableVolunters.ContributionId">
            <summary>
            Gets or sets the contribution id.
            </summary>
        </member>
        <member name="P:VolunteersProject.DTO.AvailableVolunters.VolunteersDTO">
            <summary>
            Gets or sets the volunteersDTO list.
            </summary>
        </member>
        <member name="T:VolunteersProject.DTO.VolunteerDTO">
            <summary>
            DTO for volunteer.
            </summary>
        </member>
        <member name="P:VolunteersProject.DTO.VolunteerDTO.Id">
            <summary>
            Gets or sets the volunteer id.
            </summary>
        </member>
        <member name="T:VolunteersProject.Models.AuthenticateRequest">
            <summary>
            Authentication model.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.AuthenticateRequest.Username">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.AuthenticateRequest.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="T:VolunteersProject.Models.Contribution">
            <summary>
            Contribution model.
            </summary>
        </member>
        <member name="T:VolunteersProject.Models.ErrorViewModel">
            <summary>
            Error model.
            </summary>
        </member>
        <member name="T:VolunteersProject.Models.Volunteer">
            <summary>
            Volunteer model.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.Id">
            <summary>
            Gets or sets the volunteer id.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.Surname">
            <summary>
            Gets or sets the first/sur name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.Phone">
            <summary>
            Get or sets the phone.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.Age">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.FullName">
            <summary>
            Gets or sets the full name.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.JoinHubDate">
            <summary>
            Get or sets the join date to the hub.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.InstagramProfile">
            <summary>
            Gets or sets the instagram profile.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.FaceBookProfile">
            <summary>
            Gets or sets the Facebook profile.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.DescriptionContributionToHub">
            <summary>
            Gets or set the description contribution to hub.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.ImageProfile">
            <summary>
            Gets or sets the image profile.
            </summary>
        </member>
        <member name="P:VolunteersProject.Models.Volunteer.ImageProfileByteArray">
            <summary>
            Gets or sets the image profile byte array.
            </summary>
        </member>
        <member name="T:VolunteersProject.Repository.ContributionRepository">
            <summary>
            Contribution repository.
            </summary>
        </member>
        <member name="M:VolunteersProject.Repository.ContributionRepository.#ctor(Microsoft.Extensions.Logging.ILogger{VolunteersProject.Repository.ContributionRepository},VolunteersProject.Data.VolunteersContext)">
            <summary>
            Contructor
            </summary>
            <param name="logger">Logger.</param>
            <param name="context">context.</param>
        </member>
        <member name="M:VolunteersProject.Repository.ContributionRepository.GetContributionById(System.Int32)">
            <summary>
            Get volunteer by id.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.ContributionRepository.GetContributions">
            <summary>
            Get all volunteers.
            </summary>
            <returns>List of all volunteers.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.EnrollmentRepository.#ctor(VolunteersProject.Data.VolunteersContext)">
            <summary>
            Contructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:VolunteersProject.Repository.EnrollmentRepository.GetEnrollmentById(System.Int32)">
            <summary>
            Get volunteer by id.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns></returns>
        </member>
        <member name="M:VolunteersProject.Repository.EnrollmentRepository.GetEnrollments">
            <summary>
            Get all volunteers.
            </summary>
            <returns>List of all volunteers.</returns>
        </member>
        <member name="T:VolunteersProject.Repository.IVolunteerRepository">
            <summary>
            Interface for volunteers repository.
            </summary>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.GetVolunteers">
            <summary>
            Get all volunteers.
            </summary>
            <returns>List of all volunteers.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.GetVolunteerById(System.Nullable{System.Int32})">
            <summary>
            Get volunteer by id.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns>Volunteer.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.GetVolunteerWithEnrollmentsById(System.Nullable{System.Int32})">
            <summary>
            Get volunteer with related enrollments.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns>Return colunteer with related enrollments.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.GetAvailableVolunteers(System.Int32)">
            <summary>
            Get all not assigned volunteers to the current contribution id.
            </summary>
            <param name="contributionId">Contribution id.</param>
            <returns>List of not assigned volunteers.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.AddVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Add volunteer.
            </summary>
            <param name="volunteer"></param>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.UpdateVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Update volunteer.
            </summary>
            <param name="volunteer">Volunteer.</param>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.VolunteerExists(System.Int32)">
            <summary>
            Check by id if volunteer exist.
            </summary>
            <param name="id"></param>
            <returns>True if exist, otherwise false.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.CheckVolunteerExistByPhoneOrEmail(VolunteersProject.Models.Volunteer)">
            <summary>
            Search by phone, email if volunteer exist.
            </summary>
            <param name="volunteer"></param>
            <returns>True if exist, otherwise false.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.IVolunteerRepository.DeleteVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Delete volunteer.
            </summary>
            <param name="volunteer">Volunteer.</param>
        </member>
        <member name="T:VolunteersProject.Repository.UserRepository">
            <summary>
            Repository for Users
            </summary>
        </member>
        <member name="T:VolunteersProject.Repository.VolunteerRepository">
            <summary>
            Repository for volunteers.
            </summary>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.#ctor(VolunteersProject.Data.VolunteersContext)">
            <summary>
            Contructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.GetAvailableVolunteers(System.Int32)">
            <summary>
            Get all not assigned volunteers to the current contribution id.
            </summary>
            <param name="contributionId">Contribution id.</param>
            <returns>List of not assigned volunteers.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.GetVolunteerById(System.Nullable{System.Int32})">
            <summary>
            Get volunteer by id.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns>Return volunteer.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.GetVolunteerWithEnrollmentsById(System.Nullable{System.Int32})">
            <summary>
            Get volunteer with related enrollments.
            </summary>
            <param name="id">Volunteer id.</param>
            <returns>Return colunteer with related enrollments.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.GetVolunteers">
            <summary>
            Get all volunteers.
            </summary>
            <returns>List of all volunteers.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.AddVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Add volunteer.
            </summary>
            <param name="volunteer"></param>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.UpdateVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Update volunteer.
            </summary>
            <param name="volunteer">Volunteer.</param>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.VolunteerExists(System.Int32)">
            <summary>
            Check by id if volunteer exist.
            </summary>
            <param name="id"></param>
            <returns>True if exist, otherwise false.</returns>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.DeleteVolunteer(VolunteersProject.Models.Volunteer)">
            <summary>
            Delete volunteer.
            </summary>
            <param name="volunteer">Volunteer.</param>
        </member>
        <member name="M:VolunteersProject.Repository.VolunteerRepository.CheckVolunteerExistByPhoneOrEmail(VolunteersProject.Models.Volunteer)">
            <summary>
            Search by phone, email if volunteer exist.
            </summary>
            <param name="volunteer"></param>
            <returns>True if exist, otherwise false.</returns>
        </member>
    </members>
</doc>
